/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface AirdropInterface extends Interface {
  functions: {
    addAirdrop: TypedFunctionDescription<{
      encode([_receiverAddress, _tokenAddress, _airdropAmount, _timelock]: [
        string,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    withdrawAirdrop: TypedFunctionDescription<{
      encode([_airdropID]: [BigNumberish]): string;
    }>;

    updateAdmin: TypedFunctionDescription<{
      encode([_admin, _enable]: [string, boolean]): string;
    }>;
  };

  events: {
    AirdropAdded: TypedEventDescription<{
      encodeTopics([
        airdropID,
        receiver,
        tokenAddress,
        airdropAmount,
        timelock,
        adder
      ]: [null, null, null, null, null, null]): string[];
    }>;

    AirdropWithdrew: TypedEventDescription<{
      encodeTopics([
        airdropID,
        receiver,
        tokenAddress,
        airdropAmount,
        timelock
      ]: [null, null, null, null, null]): string[];
    }>;
  };
}

export class Airdrop extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Airdrop;
  attach(addressOrName: string): Airdrop;
  deployed(): Promise<Airdrop>;

  on(event: EventFilter | string, listener: Listener): Airdrop;
  once(event: EventFilter | string, listener: Listener): Airdrop;
  addListener(eventName: EventFilter | string, listener: Listener): Airdrop;
  removeAllListeners(eventName: EventFilter | string): Airdrop;
  removeListener(eventName: any, listener: Listener): Airdrop;

  interface: AirdropInterface;

  functions: {
    admins(arg0: string): Promise<boolean>;

    airdropPerUser(
      arg0: string,
      arg1: BigNumberish
    ): Promise<{
      airdropID: BigNumber;
      receiverAddress: string;
      tokenAddress: string;
      airdropAmount: BigNumber;
      timelock: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
    }>;

    airdropWithdrawals(arg0: BigNumberish): Promise<boolean>;

    airdrops(
      arg0: BigNumberish
    ): Promise<{
      airdropID: BigNumber;
      receiverAddress: string;
      tokenAddress: string;
      airdropAmount: BigNumber;
      timelock: BigNumber;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
    }>;

    getAirdropLengthByUserAddress(_receiver: string): Promise<BigNumber>;

    addAirdrop(
      _receiverAddress: string,
      _tokenAddress: string,
      _airdropAmount: BigNumberish,
      _timelock: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawAirdrop(
      _airdropID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateAdmin(
      _admin: string,
      _enable: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    airdropID(): Promise<BigNumber>;
  };

  filters: {
    AirdropAdded(
      airdropID: null,
      receiver: null,
      tokenAddress: null,
      airdropAmount: null,
      timelock: null,
      adder: null
    ): EventFilter;

    AirdropWithdrew(
      airdropID: null,
      receiver: null,
      tokenAddress: null,
      airdropAmount: null,
      timelock: null
    ): EventFilter;
  };

  estimate: {
    addAirdrop(
      _receiverAddress: string,
      _tokenAddress: string,
      _airdropAmount: BigNumberish,
      _timelock: BigNumberish
    ): Promise<BigNumber>;

    withdrawAirdrop(_airdropID: BigNumberish): Promise<BigNumber>;

    updateAdmin(_admin: string, _enable: boolean): Promise<BigNumber>;
  };
}
